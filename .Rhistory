data[, 7],  # state
data[, 11],  # heart attack
data[, 17],  # heart failure
data[, 23]), # pneumonia
stringsAsFactors = FALSE)
colnames(fd) <- c("hospital", "state", "heart attack", "heart failure", "pneumonia")
fd[, eval(outcome)] <- as.numeric(fd[, eval(outcome)])
## Check that state and outcome are valid
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")){
stop('invalid outcome')
} else if (is.numeric(num)) {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][num, "hospital"], by_state[[i]][, "state"][1])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, row.names = result[, 2], stringsAsFactors = FALSE)
names(output) <- c("hospital", "state")
} else if (!is.numeric(num)) {
if (num == "best") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"]), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else if (num == "worst") {
by_state <- with(fd, split(fd, state))
ordered  <- list()
for (i in seq_along(by_state)){
by_state[[i]] <- by_state[[i]][order(by_state[[i]][, eval(outcome)],
by_state[[i]][, "hospital"],
decreasing = TRUE), ]
ordered[[i]]  <- c(by_state[[i]][1, c("hospital", "state")])
}
result <- do.call(rbind, ordered)
output <- as.data.frame(result, stringsAsFactors = FALSE)
rownames(output) <- output[, 2]
} else {
stop('invalid num')
}
}
return(output)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
?download.files
??download.files
??download.file
?download.file
library(swirl)
ls()
rm(list=ls())
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVresoin("dplyr")
packageVersion("dplyr")
bye()
library(swirl)
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="IN" | country == "US")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version == !is.na())
filter(cran,!is.na(R.version))
filter(cran,!is.na(r.version))
filter(cran,r_version != NA)
filter(cran,!is.na(r.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2^20)
mutate(cran3,size_mb = size / 2^20,size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
reset()
swirl()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
?n
submit()
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter?
?filter
?filter
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(filter,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs 0.99)
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum,unique > 465)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_osrted <- arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
install.packages("RMYSQL")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
library("RMySQL")
install.packages("RSQLServer")
install.packages("DBI")
install.packages("DBI")
library("RMySQL")
install.packages("DBI")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",hos="genome=mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",hos="genome-mysql.cse.ucsc.edu")
allTables <-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbDisconnect(hg19)
rm(list=ls())
print(myString)
clear
print(myString)
print(myString)
myString <- "Hello World!"
print(myString)
Rscript helloWorld.R
Source("helloWorld.R")
source("~/R files/dataStructures.R")
source("~/R files/dataStructures.R")
source("~/R files/dataStructures.R")
har <- c(1,2,3,4,5,6)
har <- c(TRUE,FALSE,FALSE,FALSE,TRUE,TRUE)
har
har <- c(1,2,3,4,5,6)
print(har[c(TRUE,FALSE,FALSE,FALSE,TRUE,TRUE)])
.libPaths()
search()
library(reshape2)
install.packages(reshape2)
data(mtcars)
head(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
install.packages("reshape2")
library(reshape2)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
View(mtcars)
carMelt <- melt(mtcars,id=c("gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt)
tail(carMelt)
library(dplyr)
View(cars)
rm(list=ls())
data(cars)
View(cars)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
a <- c(1,2,3)
b <- c(1,2,3)
plot(a,b)
abline
abline?
?abline
library(swirl)
install_from_swirl("Exploratory Data Analysis")
rm(list=ls())
swirl()
library(swirl)
rm(list=ls())
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(12)
abline(h=12)
hist(pollution$ppm)
hist(ppm)
hist(ppm,col=green)
hist(ppm,col = "green")
rug(ppm)
low
high
hist(ppm,col = "green",breaks=100)
rug(ppm)
hist(ppm,col = "green")
abline(v=12)
abline(v=12,lwd=2)
abline(v=median(ppm),col=magneta,lwd=4)
abline(v=median(ppm),col="magneta",lwd=4)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Regin")
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region)
pollution
boxplot(pm25 ~ region, data = pollution , col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col = "green")
hist(subset(pollution,region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
exit()
exit
0
info()
bye()
swirl()
library(swirl)
rm(list=ls())
swirl()
plot(pollution,latitude,pm25)
plot(pollution,latitude,ppm)
plot(pollution,plot)
summary(pollution)
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$region,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution$region == "west")
west <- subset(pollution,pollution$region == "west")
west <- subset(pollution,region == "west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
bye()
library(swirl)
swirl()
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off(png)
dev.off()
library(swirl)
ls()
rm(list=ls())
swirl()
head(cars)
with(cars,plot(speed,dist))
text(cars$speed,cars$dist,"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(disply,hwy,data = mpg)
qplot(disply,hwy,dataset = mpg)
help(qplot)
qplot(displ,hwy,data=mpg)
library(ggplot2)
data(mpg)
head(mpg)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=div)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
library(ggplot2)
data(mpg)
qplot(displ,hwy,data=mpg,facets=.~drv)
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main set = "Big Apple Data")
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main= "Big Apple Data")
xyplot(Ozone~Wind,data=airquality,pch=8,col="red",main= "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[]
play()
p[]
print(p[])
print(p)
print(p[[]])
nxt()
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout = c(2,1))
play()
xyplot(y~x|f,layout = c(3,1))
xyplot(y~x|f,layout = c(3,2))
xyplot(y~x|f,layout = c(1,1))
xyplot(y~x|f,layout = c(1,2))
xyplot(y~x|f,layout = c(2,2))
nxt()
v1
ksad
xyplot()
print(p)
v2
myedit("plot1.R")
bye()
library(swirl)
rm(list=ls())
swirl()
swirl()
str(mpg)
qplot(displ~hwy,data=mgp)
qplot(displ~hwy,data=mpg)
qplot(x=displ,y=hwy,data=mpg)
qplot(x=displ,y=hwy,data=mpg,color=drv)
qplot(x=displ,y=hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhihg
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color="manufacturer")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=.~drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
library(swirl)
swril()
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g <- ggplot(mpg,c(displ,hwy))
g <- ggplot(mpg,displ,hwy)
data(mpg)
g <- ggplot(mpg,c(displ,hwy))
g <- ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(aes(color=drv),size=4,alpha=1/2)
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+ theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat,aes(x=myx,y=myy))
g+geomline(0)
g+geom_line(0)
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggoplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method="lm",se+FALSE,size=2, color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method="lm",se=FALSE,size=2, color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method="lm",se=FALSE,size=2, color="black") + labs(x="Displacement",y="Highway Mileage",title="Swirl Rules")
g + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price,diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwdth=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth="lm")
qplot(carat,price,data=diamonds,color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(data=diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,len=4),na.rm=TRUE)
cutpoints
print(cutpoints)
diamonds$cars2 <- cut(dimaonds$carat,cutpoints)
diamonds$cars2 <- cut(diamonds$carat,cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet+grid(cut~cars2)
g+geom_point(alpha=1/3)+facet_grid(cut~cars2)
g+geom_point(alpha=1/3)+facet_grid(cut~cars2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamnds[myd,]
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(string="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(nlme)
head(BodyWeight)
?panel.lmlINE
?panel.lmline
?poinys
?points
?lines
?panel.lmline
load("E:/Notes/Sem 8/r progamming/.RData")
library(ggplot2)
#setting the directory where our dataset is stored
setwd("E://Notes//Sem 8//r progamming")
#reading the dataset
data1 <- read.csv("coursera_data.csv")
#changing the names of columns
colnames(data1) <- c('name','university','level','rating','url','description','skills')
#finding the university frequency
university_data <- table(data1$university)
#sorting the data
uni <- sort(university_data,decreasing = TRUE)
#converting the table into dataframe to be able to plot
frame_uni <- as.data.frame(uni)
colnames(frame_uni)<-c("university","freq")
#taking top 10 of the data
top_10_uni <- frame_uni[1:10,]
#plotting code for top 10 organization creating courses
p<-ggplot(data=top_10_uni, aes(x=university, y=freq))+
geom_bar(stat="identity",color="black",fill="steelblue")
p + coord_flip()
View(data1)
